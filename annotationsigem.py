import matplotlib.pyplot as plt
from Bio import pairwise2
import pandas as pd

match_score = 2       # Score for a match
mismatch_score = -1   # Penalty for a mismatch
gap_open_penalty = -0.5  # Penalty for opening a gap
gap_extend_penalty = -0.1  # Penalty for extending a gap

def calculate_alignment_scores(long_seq, short_seqs, window_size):
    max_score = window_size * match_score
    step_size = int(0.2 * window_size)
    
    all_positions = []
    all_normalized_scores = []
    all_alignment_results = []

    for short_name, short_seq in short_seqs.items():
        positions = []
        normalized_scores = []
        alignment_results = []

        for i in range(0, len(long_seq) - window_size + 1, step_size):
            window = long_seq[i:i + window_size]
            local_alignments = pairwise2.align.localms(window, short_seq, match_score, mismatch_score, gap_open_penalty, gap_extend_penalty)

            best_alignment_score = float("-inf")
            best_alignment = None

            for alignment in local_alignments:
                alignment_score = alignment[2]
                normalized_score = alignment_score / max_score

                if alignment_score > best_alignment_score:
                    best_alignment_score = alignment_score
                    best_alignment = alignment

            if best_alignment:
                position = i
                positions.append(position)
                normalized_scores.append(normalized_score)

                alignment_result = (position, window, normalized_score)
                alignment_results.append(alignment_result)

        all_positions.append(positions)
        all_normalized_scores.append(normalized_scores)
        all_alignment_results.append(alignment_results)

    return all_positions, all_normalized_scores, all_alignment_results

def plot_alignment_scores(positions, normalized_scores, short_names):
    plt.figure(figsize=(50, 8))
    for short_name, short_positions, short_scores in zip(short_names, positions, normalized_scores):
        plt.plot(short_positions, short_scores, label=short_name)

    plt.xlabel('Position')
    plt.ylabel('Normalized Alignment Score')
    plt.title('Local Alignment Scores')
    plt.legend()
    plt.show()

def display_alignment_results(alignment_results, short_names):
    for short_name, short_results in zip(short_names, alignment_results):
        print(f"Alignment results for {short_name}:")
        df = pd.DataFrame(short_results, columns=['Position', 'Window', 'Normalized Score'])
        print(df)
        print()

def main():
    main_sequence = 'MRASTLLILFCALQVMPSGDFGKIHITGSSTVIDKLENLLGHGHHLDGHNGLHERILAEDDVIEANSRGEIIEKIISRREIISDDNSYSASDSTEDSGSTEKIIKQIIIVQEKPKHGHHHAKEKIYEEEIIIKKIGDLPKHHIEVSKSISGEKRRRHGKSKHLPKSGLGHGVGGLGGIGGNKIWGPKVRRGSVSASYSVEIQQIVTPTVITDIKISGSVSVEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSASASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGRGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWRPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGRGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGLGHGGWGSSGDHSGIEGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGLRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGYGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGLRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSTSYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGYGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIDTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGCGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGCGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGGLGHGGLGGIGGRKGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGHGLGHGLGHGLGGLGHGLGGLGHGLGELGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITNIDIYGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGLGGIGGRRGWGPKGRRGSVSASYSVEIQQIVTPTVITDIEISGSVSIEGGRRGHGIGGLGLGHGLGHGLGGLGGIGGRRGWGPKGRRGSASASYSVEIQHIVTPTVITDIEISGSVSVETGRGGLGNFGALSRLGGGIPRPSVYTTHPDRMTVRAPCKLSDFNILVKVGNLRKDNGNC'  
    blocks = {
     "N terminus": "MRASTLLILFCALQVMPSGDFGKIHITGSSTVIDKLENLLGHGHHLDGHNGLHERILAEDDVIEANSRGEIIEKIISREIISDDN",
     "TR2": "SASASYSVEIOHIVTPTVITDIEISGSVSVETGRGGLGNFGALSRLGGGI",
     "RM1": "SVSASYSVEIQQIVTPTVITNIDISGSVSIEGGRRGHGLGGLGLGHGLGHGLGHGLGGLGHGGWGSSGDHSGIGGLGGLGGLGHLGGIGGRRGWGPKGRRG",
     "TR1": "SYSASDSTEDSGSTEKIIKOIIIVOEKPKHGHHHAKEKIYEEEIIIKKIGDLPKHHIEVSKSISGEKRRRHGKSKHLPKSGLGHGGGLGGIGGNKIWGPKVRRG",
     "C terminus": "PRPSVYTTHPDRMTVRAPCKLSDFNILVKVGNLRKDNGNC"
     }

    window_size = 15 #change if needed

    positions, normalized_scores, alignment_results = calculate_alignment_scores(main_sequence, blocks, window_size)
    plot_alignment_scores(positions, normalized_scores, blocks.keys())
    display_alignment_results(alignment_results, blocks.keys())

if __name__ == "__main__":
    main()
